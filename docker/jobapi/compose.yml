services:
  mds_mapper:
    image: beebucket/mds_mapper:${MDS_MAPPER_VERSION}
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "10"
    #       memory: "20G"
    # security_opt:
    #   - no-new-privileges:true
    #   - seccomp=default.json
    # read_only: true
    # logging:
    #   driver: "json-file"
    #   options:
    #     max-size: "10m"
    #     max-file: "3"
    # Should not be exposed! Only enable this temporarily for debugging!
    # ports:
    #   - "8000:8000"
    volumes:
      - mds_mapper-work:/work
    environment:
      HOST: "0.0.0.0"
      DB_URL: "postgresql+pg8000://${DB_USER}:${DB_PASSWORD}@mds_mapper-db:5432/${DB_NAME}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.edp.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.edp.entrypoints=websecure"
      - "traefik.http.routers.edp.tls=true"
      - "traefik.http.routers.edp.tls.certresolver=letsencrypt"
      - "traefik.http.services.edp.loadbalancer.server.port=8000"

  traefik:
    image: traefik:v3.1.6
    command:
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # alternative challenge mechanism via http
      # - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      # - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_CERT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./.letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  mds_mapper-db:
    image: postgres:17.2
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - mds_mapper-db-data:/var/lib/postgresql/data:z
    restart: on-failure
    # Should not be exposed! Only enable this temporarily for debugging!
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mds_mapper-work:
  mds_mapper-db-data:
